<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="11.1">
  <help_text>// Uncomment the following line to change the fontsize:
// fontsize=14


//////////////////////////////////////////////////////////////////////////////////////////////
// Welcome to UMLet!
//
// Double-click on UML elements to add them to the diagram, or to copy them
// Edit elements by modifying the text in this panel
// Hold Ctrl to select multiple elements
// Use Ctrl+mouse to select via lasso
//
// Use Â± or Ctrl+mouse wheel to zoom
// Drag a whole relation at its central square icon
//
// Press Ctrl+C to copy the whole diagram to the system clipboard (then just paste it to, eg, Word)
// Edit the files in the "palettes" directory to create your own element palettes
//
// Select "Custom Elements &gt; New..." to create new element types
//////////////////////////////////////////////////////////////////////////////////////////////


// This text will be stored with each diagram;  use it for notes.</help_text>
  <zoom_level>5</zoom_level>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>390</x>
      <y>0</y>
      <w>175</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>Jeu
--
_humains:vector&lt;Humain&gt;
_computers:vector&lt;Computer&gt;
*_screen:SDL_Surface
_event:SDL_Event
_menu:Menu
--
Jeu(nb_joueur:int)
init_SDL(*screen:SDL_Surface):void
afficherFond(x:int,y:int):void
afficherPerdu(x:int,y:int):void
afficherScore(id:int,score:int):void
afficherChiffre(x:int,y:int,chiffre:int):void
afficher():void
lancer_jeu():void
tester_fin():void
gestion_event(event:SDL_Event,*continuer:bool):void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>680</x>
      <y>10</y>
      <w>140</w>
      <h>215</h>
    </coordinates>
    <panel_attributes>Joueur
--
nom:string
id_joueur:int
score:int
next:vector&lt;Piece&gt;
workspace:Workspace
nb_next:int
*piece_courante:Piece
play:bool
cmp:int
speed:int
cmpspeed:int
nb_handicap:int
reserveHandicap:int
--
Joueur(name:std::string,id:int)
init_next_piece():void
init_next():void
changer_pieces():void   
afficher():void
gestion_piece_courante():void
poser_piece():void
move():void
traitement_workspace():void
ajouterHandicap():void
retirerHandicap():void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>430</x>
      <y>180</y>
      <w>130</w>
      <h>165</h>
    </coordinates>
    <panel_attributes>Workspace
--
nbLigne:int
nbColonne:int
tableau:std::vector&lt;std::vector&lt;Bloc&gt;&gt;
--
Workspace()
Workspace(id:int)
afficher(x:int,y:int):void
afficher_tableau():void
switch_piece(*next:Piece):void
ajouter_piece(*courante:Piece):void
afficher_tab_nonvide():void
compte_ligne(ligne:int):int
detruire_ligne(ligne:int):void
descendre(*courante:Piece):void
tourner(*courante:Piece):void
moveG(*courante:Piece):void
moveD(*courante:Piece):void
ajouterHandicap(id:int,nbHandi:int):void
retirerHandicap():void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>475</x>
      <y>385</y>
      <w>110</w>
      <h>115</h>
    </coordinates>
    <panel_attributes>Bloc
--
_x:int
_y:int
_xws:int
_yws:int
_rColor:int
_gColor:int
_bColor:int
_vide:bool
--
Bloc()
Bloc(x:int,y:int,r:int,g:int;b:int)
Bloc(x:int,y:int,vide:bool)
afficher():void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>340</x>
      <y>140</y>
      <w>349</w>
      <h>89</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=4</panel_attributes>
    <additional_attributes>340;15;50;15;50;80;15;80</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>600</x>
      <y>255</y>
      <w>185</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>Humain
--
_cpu:bool
_toucheUp:int
_toucheDown:int
_toucheLeft:int
_toucheRight:int
_lastUp:bool
_lastDown:int
_lastLeft:int
_lastRight:int
_cmp:int
--
Humain(name:std::string,id:int)
charger_touches(tUp:int,tDown:int,tLeft:int,tRight:int):void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>735</x>
      <y>405</y>
      <w>135</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>Computer
--
_ia:int
--
Computer(name:std::string,id:int,ia:int)
move():void
idiot():void
intelligent():void
simtourner(*courante:Piece,ymin:int):void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>185</x>
      <y>40</y>
      <w>175</w>
      <h>95</h>
    </coordinates>
    <panel_attributes>Menu
--
_event:SDL_Event
_nb_joueur:int
--
Menu()
void afficher():void
afficherEntree():void
afficherNbjoueur():void
afficherChiffre(chiffre:int,x:int,y:int):void
gestion_event(event:SDL_Event,*continuer:bool):void
lancer_menu():void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>665</x>
      <y>210</y>
      <w>24</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>15;15;15;45</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>800</x>
      <y>210</y>
      <w>24</w>
      <h>204</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>15;15;15;195</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>175</x>
      <y>160</y>
      <w>180</w>
      <h>215</h>
    </coordinates>
    <panel_attributes>Piece
--
_id_piece:int
_id_rot:int
_x:int
_y:int
_rColor:int
_gColor:int
_bColor:int
_blocs:std::vector&lt;Bloc&gt; 
--
Piece(id:int,rot:int,x:int,y:int)
Piece()
afficher():void
tourner():void
detourner():void
charger_blocs(id_piece:int,id_rot:int):void
changerPiece(id_piece:int,id_rot:int,r:int,g:int,b:int):void
translateX(val:int):void
translateY(val:int):void
downest():Bloc
leftest():Bloc
rightest():Bloc
colorBlocs(int alea):void
descendre():void
moveG():void
moveD():void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>550</x>
      <y>45</y>
      <w>59</w>
      <h>219</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=n</panel_attributes>
    <additional_attributes>15;15;50;15;50;35;50;210</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>545</x>
      <y>165</y>
      <w>144</w>
      <h>49</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>135;15;85;15;85;40;15;40</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>340</x>
      <y>345</y>
      <w>144</w>
      <h>74</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=4</panel_attributes>
    <additional_attributes>15;15;60;15;60;65;135;65</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>345</x>
      <y>60</y>
      <w>54</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>45;15;15;15</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>550</x>
      <y>85</y>
      <w>254</w>
      <h>329</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>15;15;30;15;30;160;245;160;245;320</additional_attributes>
  </element>
</diagram>
